-- do not edit; automatically generated by UU.AG
module Top.Cobalt.Generator where

import Top.Cobalt.ParseRules
import Top.Cobalt.ShowAG
import Top.Cobalt.AGSyntax
import Top.Cobalt.Syntax
import Top.Cobalt.Escape
import Top.Types
import Top.Types.Quantification
import Top.Types.Qualification
import Data.List
import Data.Maybe
import Data.FiniteMap

import Top.Cobalt.AGSyntax
import Top.Cobalt.ShowAG

import Top.Constraint.Equality
import Top.Constraint.Polymorphism
import Top.Solver.Greedy
import Top.Solver
import Top.Constraint.Information
import Top.Constraint
import Top.Implementation.Overloading
import Top.Implementation.Basic (ErrorLabel)
import Debug.Trace

-- Returns the elements in xs which occur more than once.  
duplicates :: (Ord a) => [a] -> [a]
duplicates xs = map head (filter (\ys -> length ys > 1) (group (sort xs)))

-- Much of the information is collected as an StrAL a, and then converted to a StrMap a for speed.
type StrAL a  = [(String, a)]
type StrMap a = FiniteMap String a

-- Usually, information is kept for inherited (1st entry) and synthesized (2nd) attributes.
type InhSyn a = ([a], [a])

type JudgementsAL = StrAL (InhSyn String) -- For each judgement the lists of types of the attributes (inh,syns).
type AltArgTypesAL= StrAL [String] -- For each alternative, the list of types for the fields it contains
type AltNts       = StrAL String -- Lists each alternative for a non-terminal with its corresponding non-terminal  
type AltTypesAL   = StrAL TpScheme -- Each alternative paired with its type scheme 

type VarAL        = StrAL String -- Used?

-- For more efficient access, after construction.
type AltArgTypesMap = StrMap [String] -- see AL variant
type JudgementsMap  = StrMap (InhSyn String) -- see AL variant
type FunctionEnvironment = StrMap TpScheme -- For each function id, returns its type scheme


showConstraintTerm :: VarAL -> ConstraintTerm -> String
showConstraintTerm vm (ConstraintTerm term) = showTerm vm term 

showTerm :: VarAL -> Term -> String
showTerm vm (TermVar s)      = s ? vm
showTerm vm (TermString s)      = show s
showTerm vm (TermApp f args) = unwords (f : map (pars . showTerm vm) args)

bracks s = "[" ++ s ++ "]"
pars s = "(" ++ s ++ ")"

-- Association list things (functional mappings represented as lists of pairs)
domainAL :: [(a,b)] -> [a]
domainAL = map fst 
rangeAL :: [(a,b)] -> [b]
rangeAL = map snd

-- No maybe here. Simply omit the a's for which we can not map through b to a c.
joinAL :: (Eq b) => [(a,b)] -> [(b,c)] -> [(a,c)]
joinAL [] as2     = []
joinAL ((x,y):xs) as2 = 
  case lookup y as2 of
    Nothing -> rest
    Just z  -> (x,z):rest
   where
     rest = joinAL xs as2

x ? xs = let err = error ("Could not find " ++ show x ++ " in " ++ show xs) 
         in maybe err id (lookup x xs)
				 
{-
generator :: FunctionEnvironment -> ClassEnvironment -> TypeSystem -> IO ()
generator gamma classEnv system =
   let (agcode, _, staticErrors, typeErrors) = sem_TypeSystem system classEnv gamma
       reportErrors :: Show a => [a] -> IO ()
       reportErrors = putStrLn . unlines . map show
   in case staticErrors of 
         []   -> case typeErrors of
                    [] -> 
                       let msg = unlines [ "imports {", "import TempImport", "}", show agcode ]
                       in do putStrLn msg
                             writeFile "Temp.ag" msg
                             putStrLn "output written to <Temp.ag>"
                    errs -> reportErrors (map snd errs)
         errs -> reportErrors errs
-}
	
generator :: FunctionEnvironment -> ClassEnvironment -> TypeSystem -> IO ()
generator gamma classEnv system =
   let (_, staticErrors, staticWarnings) = sem_TypeSystem system classEnv gamma
       reportErrors :: Show a => [a] -> IO ()
       reportErrors = putStrLn . unlines . map show
   in case staticErrors of 
         []   -> case staticWarnings of
                    [] -> putStrLn "Compilation succesful"
                    errs -> reportErrors errs
         errs -> reportErrors errs
			 				 

type StaticMessages = [StaticMessage]
data StaticMessage = FunctionNotDefined         String{-rulename-} String
                   | UnknownType                String{-nt-}       String
                   | MetaVarNotDefined          String{-rulename-} String              
                   | DuplicateMetaVarInPremise  String{-rulename-} String
                   | DuplicateVar               String{-rulename-} String
                   | DuplicateRuleName          String{-rulename-}
                   | ConstraintIsNotApplication String{-rulename-} Term
                   | MustBeVar                  String{-rulename-} Term
                   | MustBeSimpleApp            String{-rulename-} Term  
                   | NonTerminalNotDefined      String     -- if a judgement is given for a non-existent nonterminal
                   | MissesJudgement            String{-nt-}
                   | NoJudgementForType         String{-rulename-} String{-type-}
                   | DuplicateAlternative       String
                   | UnknownAlternative         String{-rulename-} String
                   | WrongNumberOfArguments     String{-rulename-} Term
                   | WrongNumberOfAttributes    String{-rulename-} String{-where-}
                   | InternalError              String{-rulename-} String{-what happened-}
                   
                   | DeclaredAndUsedInPremise   String{-rulename-} String
                   | MetaVarNotUsed             String{-rulename-} String
     deriving Show

type PremiseAttrs   = [Maybe PremiseAttr]
data PremiseAttr    = PremiseAttr 
   { preMeta           :: String 
   , preMetaType       :: String
   , preSynVars        :: [Term]  -- implicitly declared variables from the synthesized section
   , preInhExprs       :: [Term]  -- all inherited expressions
--   , declaredInPremise :: [String] -- Variables declared by this construct: the syns in this case
   }
   
data ConclusionAttr = ConclusionAttr
   { conAlternative       :: String     -- name of the alternative
   , metaVarAL            :: VarAL      -- maps each metavar (that has a type referring to an AG datatype) to its type
   , conInhVars           :: [Term]     -- implicitly declared variables from the inherited attr section
   , conSynExprs          :: [Term]     -- all synthesized expressions
--   , declaredInConclusion :: [String] -- Variables declared by this construct: the inhs and the meta vars in this case
   }


checkPremise :: String -> JudgementsMap -> VarAL -> Judgement -> Escape StaticMessages PremiseAttr
checkPremise rulename judgementdeclmap metavarAL (Judgement inhExprs expr synExprs) = 
   do{ var <- check (matchTermVar expr) [MustBeVar rulename expr]
     ; tp <- check (lookup var metavarAL) [MetaVarNotDefined rulename var]
     ; (inhTypes, synTypes) <- 
         check (lookupFM judgementdeclmap var) [NoJudgementForType rulename tp]  -- retrieve info on judgement for this type
     ; let synVars = filter (isJust . matchTermVar) synExprs
     ; continueIf (length inhTypes == length inhExprs) [WrongNumberOfAttributes rulename ("premise " ++ var ++", inhs")] +++
       continueIf (length synTypes == length synExprs) [WrongNumberOfAttributes rulename ("premise " ++ var ++ ", syns")] +++
       continueIf (length synVars == length synExprs) (map (MustBeVar rulename) (filter (not . isJust . matchTermVar) syns))
     ; return (PremiseAttr var tp synVars)
     }

checkConclusion :: String -> JudgementsMap -> AltArgTypesMap -> [String] -> Judgement -> Escape StaticMessages ConclusionAttr 
checkConclusion rulename judgementdeclmap argtypesmap nts (Judgement inhExprs expr synExprs) =
   do{ (con, args) <- check (matchSimpleTermApp expr) [MustBeSimpleApp rulename expr]                -- is expr of the form C var1 ... varm ?
     ; (inhTypes, synTypes) <- 
         check (lookupFM judgementdeclmap con) [UnknownAlternative rulename con]                                               -- is C known?
     ; argTypes <- check (lookupFM argtypesmap con) [InternalError rulename "while doing lookup for argument type of conclusion"]
                                                                                                                       -- Should not go wrong
     ; let inhVars = filter (isJust . matchTermVar) inhExprs
     ; continueIf (length inhTypes == length inhExprs) [WrongNumberOfAttributes rulename "conclusion, inhs"] +++  -- Compare declared and given number of inherited attributes
       continueIf (length synTypes == length synExprs) [WrongNumberOfAttributes rulename "conclusion, syns"] +++  -- Compare declared and given number of synthesized attributes
       continueIf (length args == length argTypes) [WrongNumberOfArguments rulename expr] +++  -- Compare declared and given number of arguments to C
       continueIf (length inhVars == length inhExprs) (map (MustBeVar rulename) (filter (not . isJust . matchTermVar) inhExprs)) -- All inhs should be simple variables.
     ; return (ConclusionAttr con (metaFilter nts (zip args argTypes)) inhExprs synExprs)
     }

-- Helper functions

metaFilter :: [String] -> [(String,String)] -> [(String,String)] 
metaFilter metatypes = filter (\(var,tp) -> tp `elem` metatypes)

getTerm :: ConstraintTerm -> Term
getTerm (ConstraintTerm term) = term

isTermVar :: ConstraintTerm -> Bool
isTermVar = isJust . matchTermVar . getTerm

isTermApp :: ConstraintTerm -> Bool
isTermApp = isJust . matchTermApp . getTerm 

isSimpleTermApp :: ConstraintTerm -> Bool
isSimpleTermApp = isJust . matchSimpleTermApp . getTerm

matchTermVar :: Term -> Maybe String
matchTermVar (TermVar x) = Just x
matchTermVar _           = Nothing

matchTermApp :: Term -> Maybe String
matchTermApp (TermApp fun args) = Just fun
matchTermApp _                  = Nothing

matchSimpleTermApp :: Term -> Maybe (String, [String])
matchSimpleTermApp (TermApp fun args) = do xs <- mapM matchTermVar args ; return (fun, xs)
matchSimpleTermApp _                  = Nothing

getTermVariables :: Term -> [String]
getTermVariables (TermVar x)        = [x]
getTermVariables (TermApp fun args) = concat (map getTermVariables args)
getTermVariables (TermString s)     = []

-- Bastiaan
values = eltsFM


type TypeErrors = [TypeError]
type TypeError  = (CInfo, ErrorLabel)
type CSet  = [MyCon]
type MyCon = ConstraintSum EqualityConstraint (PolymorphismConstraint Predicates) CInfo
type CInfo = String
instance TypeConstraintInfo CInfo
instance PolyTypeConstraintInfo Predicates CInfo


implicitAttrs :: AGAttrs
implicitAttrs = 
   [ AGAttr "Expr" Inherited "gamma" "Gamma"
   , AGAttr "Expr" Synthesized "tp" "Type"
   ]

explicitAttrs :: AGAttrs
explicitAttrs = 
   [ AGAttr "Expr" Chained "unique" "Int"
   , AGAttr "Expr" Synthesized "cset" "[Constraint]"
   ] 

-- AGAttr ------------------------------------------------------
-- semantic domain
type T_AGAttr = ( (AGAttr))
-- cata
sem_AGAttr :: (AGAttr) ->
              (T_AGAttr)
sem_AGAttr ((AGAttr (_nonterminals) (_attrKind) (_attrName) (_attrType))) =
    (sem_AGAttr_AGAttr (_nonterminals) ((sem_Attr (_attrKind))) (_attrName) (_attrType))
sem_AGAttr_AGAttr :: (String) ->
                     (T_Attr) ->
                     (String) ->
                     (String) ->
                     (T_AGAttr)
sem_AGAttr_AGAttr (nonterminals_) (attrKind_) (attrName_) (attrType_) =
    let _lhsOself :: (AGAttr)
        _attrKindIself :: (Attr)
        ( _attrKindIself) =
            (attrKind_ )
        (_self@_) =
            AGAttr nonterminals_ _attrKindIself attrName_ attrType_
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGAttrs -----------------------------------------------------
-- semantic domain
type T_AGAttrs = ( (AGAttrs))
-- cata
sem_AGAttrs :: (AGAttrs) ->
               (T_AGAttrs)
sem_AGAttrs (list) =
    (foldr (sem_AGAttrs_Cons) (sem_AGAttrs_Nil) ((map sem_AGAttr list)))
sem_AGAttrs_Cons :: (T_AGAttr) ->
                    (T_AGAttrs) ->
                    (T_AGAttrs)
sem_AGAttrs_Cons (hd_) (tl_) =
    let _lhsOself :: (AGAttrs)
        _hdIself :: (AGAttr)
        _tlIself :: (AGAttrs)
        ( _hdIself) =
            (hd_ )
        ( _tlIself) =
            (tl_ )
        (_self@_) =
            (:) _hdIself _tlIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
sem_AGAttrs_Nil :: (T_AGAttrs)
sem_AGAttrs_Nil  =
    let _lhsOself :: (AGAttrs)
        (_self@_) =
            []
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGCode ------------------------------------------------------
-- semantic domain
type T_AGCode = ( (AGCode))
-- cata
sem_AGCode :: (AGCode) ->
              (T_AGCode)
sem_AGCode ((AGCode (_agdatas) (_agattrs) (_agsems))) =
    (sem_AGCode_AGCode ((sem_AGDatas (_agdatas))) ((sem_AGAttrs (_agattrs))) ((sem_AGSems (_agsems))))
sem_AGCode_AGCode :: (T_AGDatas) ->
                     (T_AGAttrs) ->
                     (T_AGSems) ->
                     (T_AGCode)
sem_AGCode_AGCode (agdatas_) (agattrs_) (agsems_) =
    let _lhsOself :: (AGCode)
        _agdatasIaltArgTypes :: (AltArgTypesAL)
        _agdatasIaltNts :: (AltNts)
        _agdatasIaltTypes :: (AltTypesAL)
        _agdatasIself :: (AGDatas)
        _agattrsIself :: (AGAttrs)
        _agsemsIself :: (AGSems)
        ( _agdatasIaltArgTypes,_agdatasIaltNts,_agdatasIaltTypes,_agdatasIself) =
            (agdatas_ )
        ( _agattrsIself) =
            (agattrs_ )
        ( _agsemsIself) =
            (agsems_ )
        (_self@_) =
            AGCode _agdatasIself _agattrsIself _agsemsIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGData ------------------------------------------------------
-- semantic domain
type T_AGData = ( (AltArgTypesAL),(AltNts),(AltTypesAL),(AGData))
-- cata
sem_AGData :: (AGData) ->
              (T_AGData)
sem_AGData ((AGData (_nonterminal) (_alternative) (_children))) =
    (sem_AGData_AGData (_nonterminal) (_alternative) (_children))
sem_AGData_AGData :: (String) ->
                     (String) ->
                     ([(String, String)]) ->
                     (T_AGData)
sem_AGData_AGData (nonterminal_) (alternative_) (children_) =
    let _lhsOaltArgTypes :: (AltArgTypesAL)
        _lhsOaltNts :: (AltNts)
        _lhsOaltTypes :: (AltTypesAL)
        _lhsOself :: (AGData)
        (_altTp@_) =
            foldr (.->.) (TCon nonterminal_) (map (TCon . snd) children_)
        (_lhsOaltNts@_) =
            [(alternative_, nonterminal_)]
        (_lhsOaltArgTypes@_) =
            [(alternative_, map snd children_)]
        (_lhsOaltTypes@_) =
            [(alternative_, toTpScheme _altTp )]
        (_self@_) =
            AGData nonterminal_ alternative_ children_
        (_lhsOself@_) =
            _self
    in  ( _lhsOaltArgTypes,_lhsOaltNts,_lhsOaltTypes,_lhsOself)
-- AGDatas -----------------------------------------------------
-- semantic domain
type T_AGDatas = ( (AltArgTypesAL),(AltNts),(AltTypesAL),(AGDatas))
-- cata
sem_AGDatas :: (AGDatas) ->
               (T_AGDatas)
sem_AGDatas (list) =
    (foldr (sem_AGDatas_Cons) (sem_AGDatas_Nil) ((map sem_AGData list)))
sem_AGDatas_Cons :: (T_AGData) ->
                    (T_AGDatas) ->
                    (T_AGDatas)
sem_AGDatas_Cons (hd_) (tl_) =
    let _lhsOaltArgTypes :: (AltArgTypesAL)
        _lhsOaltNts :: (AltNts)
        _lhsOaltTypes :: (AltTypesAL)
        _lhsOself :: (AGDatas)
        _hdIaltArgTypes :: (AltArgTypesAL)
        _hdIaltNts :: (AltNts)
        _hdIaltTypes :: (AltTypesAL)
        _hdIself :: (AGData)
        _tlIaltArgTypes :: (AltArgTypesAL)
        _tlIaltNts :: (AltNts)
        _tlIaltTypes :: (AltTypesAL)
        _tlIself :: (AGDatas)
        ( _hdIaltArgTypes,_hdIaltNts,_hdIaltTypes,_hdIself) =
            (hd_ )
        ( _tlIaltArgTypes,_tlIaltNts,_tlIaltTypes,_tlIself) =
            (tl_ )
        (_lhsOaltArgTypes@_) =
            _hdIaltArgTypes  ++  _tlIaltArgTypes
        (_lhsOaltNts@_) =
            _hdIaltNts  ++  _tlIaltNts
        (_lhsOaltTypes@_) =
            _hdIaltTypes  ++  _tlIaltTypes
        (_self@_) =
            (:) _hdIself _tlIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOaltArgTypes,_lhsOaltNts,_lhsOaltTypes,_lhsOself)
sem_AGDatas_Nil :: (T_AGDatas)
sem_AGDatas_Nil  =
    let _lhsOaltArgTypes :: (AltArgTypesAL)
        _lhsOaltNts :: (AltNts)
        _lhsOaltTypes :: (AltTypesAL)
        _lhsOself :: (AGDatas)
        (_lhsOaltArgTypes@_) =
            []
        (_lhsOaltNts@_) =
            []
        (_lhsOaltTypes@_) =
            []
        (_self@_) =
            []
        (_lhsOself@_) =
            _self
    in  ( _lhsOaltArgTypes,_lhsOaltNts,_lhsOaltTypes,_lhsOself)
-- AGSem -------------------------------------------------------
-- semantic domain
type T_AGSem = ( (AGSem))
-- cata
sem_AGSem :: (AGSem) ->
             (T_AGSem)
sem_AGSem ((AGSem (_nonterminal) (_alternative) (_semdecls))) =
    (sem_AGSem_AGSem (_nonterminal) (_alternative) ((sem_AGSemDecls (_semdecls))))
sem_AGSem_AGSem :: (String) ->
                   (String) ->
                   (T_AGSemDecls) ->
                   (T_AGSem)
sem_AGSem_AGSem (nonterminal_) (alternative_) (semdecls_) =
    let _lhsOself :: (AGSem)
        _semdeclsIself :: (AGSemDecls)
        ( _semdeclsIself) =
            (semdecls_ )
        (_self@_) =
            AGSem nonterminal_ alternative_ _semdeclsIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGSemDecl ---------------------------------------------------
-- semantic domain
type T_AGSemDecl = ( (AGSemDecl))
-- cata
sem_AGSemDecl :: (AGSemDecl) ->
                 (T_AGSemDecl)
sem_AGSemDecl ((AGSemDecl (_leftNT) (_leftAttr) (_right))) =
    (sem_AGSemDecl_AGSemDecl (_leftNT) (_leftAttr) (_right))
sem_AGSemDecl_AGSemDecl :: (String) ->
                           (String) ->
                           (String) ->
                           (T_AGSemDecl)
sem_AGSemDecl_AGSemDecl (leftNT_) (leftAttr_) (right_) =
    let _lhsOself :: (AGSemDecl)
        (_self@_) =
            AGSemDecl leftNT_ leftAttr_ right_
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGSemDecls --------------------------------------------------
-- semantic domain
type T_AGSemDecls = ( (AGSemDecls))
-- cata
sem_AGSemDecls :: (AGSemDecls) ->
                  (T_AGSemDecls)
sem_AGSemDecls (list) =
    (foldr (sem_AGSemDecls_Cons) (sem_AGSemDecls_Nil) ((map sem_AGSemDecl list)))
sem_AGSemDecls_Cons :: (T_AGSemDecl) ->
                       (T_AGSemDecls) ->
                       (T_AGSemDecls)
sem_AGSemDecls_Cons (hd_) (tl_) =
    let _lhsOself :: (AGSemDecls)
        _hdIself :: (AGSemDecl)
        _tlIself :: (AGSemDecls)
        ( _hdIself) =
            (hd_ )
        ( _tlIself) =
            (tl_ )
        (_self@_) =
            (:) _hdIself _tlIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
sem_AGSemDecls_Nil :: (T_AGSemDecls)
sem_AGSemDecls_Nil  =
    let _lhsOself :: (AGSemDecls)
        (_self@_) =
            []
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- AGSems ------------------------------------------------------
-- semantic domain
type T_AGSems = ( (AGSems))
-- cata
sem_AGSems :: (AGSems) ->
              (T_AGSems)
sem_AGSems (list) =
    (foldr (sem_AGSems_Cons) (sem_AGSems_Nil) ((map sem_AGSem list)))
sem_AGSems_Cons :: (T_AGSem) ->
                   (T_AGSems) ->
                   (T_AGSems)
sem_AGSems_Cons (hd_) (tl_) =
    let _lhsOself :: (AGSems)
        _hdIself :: (AGSem)
        _tlIself :: (AGSems)
        ( _hdIself) =
            (hd_ )
        ( _tlIself) =
            (tl_ )
        (_self@_) =
            (:) _hdIself _tlIself
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
sem_AGSems_Nil :: (T_AGSems)
sem_AGSems_Nil  =
    let _lhsOself :: (AGSems)
        (_self@_) =
            []
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- Attr --------------------------------------------------------
-- semantic domain
type T_Attr = ( (Attr))
-- cata
sem_Attr :: (Attr) ->
            (T_Attr)
sem_Attr ((Chained )) =
    (sem_Attr_Chained )
sem_Attr ((Inherited )) =
    (sem_Attr_Inherited )
sem_Attr ((Synthesized )) =
    (sem_Attr_Synthesized )
sem_Attr_Chained :: (T_Attr)
sem_Attr_Chained  =
    let _lhsOself :: (Attr)
        (_self@_) =
            Chained
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
sem_Attr_Inherited :: (T_Attr)
sem_Attr_Inherited  =
    let _lhsOself :: (Attr)
        (_self@_) =
            Inherited
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
sem_Attr_Synthesized :: (T_Attr)
sem_Attr_Synthesized  =
    let _lhsOself :: (Attr)
        (_self@_) =
            Synthesized
        (_lhsOself@_) =
            _self
    in  ( _lhsOself)
-- ConstraintTerm ----------------------------------------------
-- semantic domain
type T_ConstraintTerm = (AGDatas) ->
                        (AltArgTypesMap) ->
                        (FunctionEnvironment) ->
                        (JudgementsMap) ->
                        ([String]) ->
                        (String) ->
                        ([(String, Int)]) ->
                        (Int) ->
                        ( ([String]),(CSet),(ConstraintTerm),(StaticMessages),(StaticMessages),(Tp),(Int))
-- cata
sem_ConstraintTerm :: (ConstraintTerm) ->
                      (T_ConstraintTerm)
sem_ConstraintTerm ((ConstraintTerm (_constraint))) =
    (sem_ConstraintTerm_ConstraintTerm ((sem_Term (_constraint))))
sem_ConstraintTerm_ConstraintTerm :: (T_Term) ->
                                     (T_ConstraintTerm)
sem_ConstraintTerm_ConstraintTerm (constraint_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (ConstraintTerm)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtp :: (Tp)
            _lhsOunique :: (Int)
            _constraintIallVariables :: ([String])
            _constraintIcset :: (CSet)
            _constraintIself :: (Term)
            _constraintIstaticErrors :: (StaticMessages)
            _constraintIstaticWarnings :: (StaticMessages)
            _constraintItp :: (Tp)
            _constraintIunique :: (Int)
            _constraintOagdatas :: (AGDatas)
            _constraintOaltArgTypesMap :: (AltArgTypesMap)
            _constraintOfunctions :: (FunctionEnvironment)
            _constraintOjudgementsMap :: (JudgementsMap)
            _constraintOnts :: ([String])
            _constraintOrulename :: (String)
            _constraintOstrmap :: ([(String, Int)])
            _constraintOunique :: (Int)
            ( _constraintIallVariables,_constraintIcset,_constraintIself,_constraintIstaticErrors,_constraintIstaticWarnings,_constraintItp,_constraintIunique) =
                (constraint_ (_constraintOagdatas) (_constraintOaltArgTypesMap) (_constraintOfunctions) (_constraintOjudgementsMap) (_constraintOnts) (_constraintOrulename) (_constraintOstrmap) (_constraintOunique))
            (_lhsOstaticErrors@_) =
                [ ConstraintIsNotApplication _lhsIrulename (getTerm con)
                | con <- [_self]
                , not (isTermApp con)
                ]
                ++ _constraintIstaticErrors
            (_lhsOtp@_) =
                _constraintItp
            (_lhsOallVariables@_) =
                _constraintIallVariables
            (_lhsOcset@_) =
                _constraintIcset
            (_lhsOstaticWarnings@_) =
                _constraintIstaticWarnings
            (_self@_) =
                ConstraintTerm _constraintIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _constraintIunique
            (_constraintOagdatas@_) =
                _lhsIagdatas
            (_constraintOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_constraintOfunctions@_) =
                _lhsIfunctions
            (_constraintOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_constraintOnts@_) =
                _lhsInts
            (_constraintOrulename@_) =
                _lhsIrulename
            (_constraintOstrmap@_) =
                _lhsIstrmap
            (_constraintOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtp,_lhsOunique)
-- ConstraintTerms ---------------------------------------------
-- semantic domain
type T_ConstraintTerms = (AGDatas) ->
                         (AltArgTypesMap) ->
                         (FunctionEnvironment) ->
                         (JudgementsMap) ->
                         ([String]) ->
                         (String) ->
                         ([(String, Int)]) ->
                         (Int) ->
                         ( ([String]),(CSet),(ConstraintTerms),(StaticMessages),(StaticMessages),(Tps),(Int))
-- cata
sem_ConstraintTerms :: (ConstraintTerms) ->
                       (T_ConstraintTerms)
sem_ConstraintTerms (list) =
    (foldr (sem_ConstraintTerms_Cons) (sem_ConstraintTerms_Nil) ((map sem_ConstraintTerm list)))
sem_ConstraintTerms_Cons :: (T_ConstraintTerm) ->
                            (T_ConstraintTerms) ->
                            (T_ConstraintTerms)
sem_ConstraintTerms_Cons (hd_) (tl_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (ConstraintTerms)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtps :: (Tps)
            _lhsOunique :: (Int)
            _hdIallVariables :: ([String])
            _hdIcset :: (CSet)
            _hdIself :: (ConstraintTerm)
            _hdIstaticErrors :: (StaticMessages)
            _hdIstaticWarnings :: (StaticMessages)
            _hdItp :: (Tp)
            _hdIunique :: (Int)
            _hdOagdatas :: (AGDatas)
            _hdOaltArgTypesMap :: (AltArgTypesMap)
            _hdOfunctions :: (FunctionEnvironment)
            _hdOjudgementsMap :: (JudgementsMap)
            _hdOnts :: ([String])
            _hdOrulename :: (String)
            _hdOstrmap :: ([(String, Int)])
            _hdOunique :: (Int)
            _tlIallVariables :: ([String])
            _tlIcset :: (CSet)
            _tlIself :: (ConstraintTerms)
            _tlIstaticErrors :: (StaticMessages)
            _tlIstaticWarnings :: (StaticMessages)
            _tlItps :: (Tps)
            _tlIunique :: (Int)
            _tlOagdatas :: (AGDatas)
            _tlOaltArgTypesMap :: (AltArgTypesMap)
            _tlOfunctions :: (FunctionEnvironment)
            _tlOjudgementsMap :: (JudgementsMap)
            _tlOnts :: ([String])
            _tlOrulename :: (String)
            _tlOstrmap :: ([(String, Int)])
            _tlOunique :: (Int)
            ( _hdIallVariables,_hdIcset,_hdIself,_hdIstaticErrors,_hdIstaticWarnings,_hdItp,_hdIunique) =
                (hd_ (_hdOagdatas) (_hdOaltArgTypesMap) (_hdOfunctions) (_hdOjudgementsMap) (_hdOnts) (_hdOrulename) (_hdOstrmap) (_hdOunique))
            ( _tlIallVariables,_tlIcset,_tlIself,_tlIstaticErrors,_tlIstaticWarnings,_tlItps,_tlIunique) =
                (tl_ (_tlOagdatas) (_tlOaltArgTypesMap) (_tlOfunctions) (_tlOjudgementsMap) (_tlOnts) (_tlOrulename) (_tlOstrmap) (_tlOunique))
            (_lhsOtps@_) =
                _hdItp : _tlItps
            (_lhsOallVariables@_) =
                _hdIallVariables  ++  _tlIallVariables
            (_lhsOcset@_) =
                _hdIcset  ++  _tlIcset
            (_lhsOstaticErrors@_) =
                _hdIstaticErrors  ++  _tlIstaticErrors
            (_lhsOstaticWarnings@_) =
                _hdIstaticWarnings  ++  _tlIstaticWarnings
            (_self@_) =
                (:) _hdIself _tlIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _tlIunique
            (_hdOagdatas@_) =
                _lhsIagdatas
            (_hdOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_hdOfunctions@_) =
                _lhsIfunctions
            (_hdOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_hdOnts@_) =
                _lhsInts
            (_hdOrulename@_) =
                _lhsIrulename
            (_hdOstrmap@_) =
                _lhsIstrmap
            (_hdOunique@_) =
                _lhsIunique
            (_tlOagdatas@_) =
                _lhsIagdatas
            (_tlOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_tlOfunctions@_) =
                _lhsIfunctions
            (_tlOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_tlOnts@_) =
                _lhsInts
            (_tlOrulename@_) =
                _lhsIrulename
            (_tlOstrmap@_) =
                _lhsIstrmap
            (_tlOunique@_) =
                _hdIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtps,_lhsOunique)
sem_ConstraintTerms_Nil :: (T_ConstraintTerms)
sem_ConstraintTerms_Nil  =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (ConstraintTerms)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtps :: (Tps)
            _lhsOunique :: (Int)
            (_lhsOtps@_) =
                []
            (_lhsOallVariables@_) =
                []
            (_lhsOcset@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_self@_) =
                []
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtps,_lhsOunique)
-- DeductionRule -----------------------------------------------
-- semantic domain
type T_DeductionRule = (AGDatas) ->
                       (AltArgTypesMap) ->
                       (FunctionEnvironment) ->
                       (JudgementsMap) ->
                       ([String]) ->
                       (String) ->
                       ([(String, Int)]) ->
                       (Int) ->
                       ( ([String]),(Maybe ConclusionAttr),(CSet),([String]),(PremiseAttrs),(DeductionRule),(StaticMessages),(StaticMessages),(Int),([String]))
-- cata
sem_DeductionRule :: (DeductionRule) ->
                     (T_DeductionRule)
sem_DeductionRule ((DeductionRule (_premises) (_conclusion))) =
    (sem_DeductionRule_DeductionRule ((sem_Judgements (_premises))) ((sem_Judgement (_conclusion))))
sem_DeductionRule_DeductionRule :: (T_Judgements) ->
                                   (T_Judgement) ->
                                   (T_DeductionRule)
sem_DeductionRule_DeductionRule (premises_) (conclusion_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOconclusionAttr :: (Maybe ConclusionAttr)
            _lhsOcset :: (CSet)
            _lhsOdeclaredVars :: ([String])
            _lhsOpremiseAttrs :: (PremiseAttrs)
            _lhsOself :: (DeductionRule)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOunique :: (Int)
            _lhsOusedVars :: ([String])
            _premisesIallVariables :: ([String])
            _premisesIcset :: (CSet)
            _premisesIdeclaredVars :: ([String])
            _premisesIpremiseAttrs :: (PremiseAttrs)
            _premisesIself :: (Judgements)
            _premisesIstaticErrors :: (StaticMessages)
            _premisesIstaticWarnings :: (StaticMessages)
            _premisesIunique :: (Int)
            _premisesIusedVars :: ([String])
            _premisesOagdatas :: (AGDatas)
            _premisesOaltArgTypesMap :: (AltArgTypesMap)
            _premisesOfunctions :: (FunctionEnvironment)
            _premisesOisConclusion :: (Bool)
            _premisesOjudgementsMap :: (JudgementsMap)
            _premisesOmetaVarAL :: (VarAL)
            _premisesOnts :: ([String])
            _premisesOrulename :: (String)
            _premisesOstrmap :: ([(String, Int)])
            _premisesOunique :: (Int)
            _conclusionIallVariables :: ([String])
            _conclusionIcset :: (CSet)
            _conclusionIdeclaredVars :: ([String])
            _conclusionIpremiseAttrs :: (PremiseAttrs)
            _conclusionIself :: (Judgement)
            _conclusionIstaticErrors :: (StaticMessages)
            _conclusionIstaticWarnings :: (StaticMessages)
            _conclusionIunique :: (Int)
            _conclusionIusedVars :: ([String])
            _conclusionOagdatas :: (AGDatas)
            _conclusionOaltArgTypesMap :: (AltArgTypesMap)
            _conclusionOfunctions :: (FunctionEnvironment)
            _conclusionOisConclusion :: (Bool)
            _conclusionOjudgementsMap :: (JudgementsMap)
            _conclusionOmetaVarAL :: (VarAL)
            _conclusionOnts :: ([String])
            _conclusionOrulename :: (String)
            _conclusionOstrmap :: ([(String, Int)])
            _conclusionOunique :: (Int)
            ( _premisesIallVariables,_premisesIcset,_premisesIdeclaredVars,_premisesIpremiseAttrs,_premisesIself,_premisesIstaticErrors,_premisesIstaticWarnings,_premisesIunique,_premisesIusedVars) =
                (premises_ (_premisesOagdatas) (_premisesOaltArgTypesMap) (_premisesOfunctions) (_premisesOisConclusion) (_premisesOjudgementsMap) (_premisesOmetaVarAL) (_premisesOnts) (_premisesOrulename) (_premisesOstrmap) (_premisesOunique))
            ( _conclusionIallVariables,_conclusionIcset,_conclusionIdeclaredVars,_conclusionIpremiseAttrs,_conclusionIself,_conclusionIstaticErrors,_conclusionIstaticWarnings,_conclusionIunique,_conclusionIusedVars) =
                (conclusion_ (_conclusionOagdatas) (_conclusionOaltArgTypesMap) (_conclusionOfunctions) (_conclusionOisConclusion) (_conclusionOjudgementsMap) (_conclusionOmetaVarAL) (_conclusionOnts) (_conclusionOrulename) (_conclusionOstrmap) (_conclusionOunique))
            (_lhsOstaticErrors@_) =
                _staticErrorsConclusion ++
                [ DuplicateVar _lhsIrulename x
                | x <- duplicates _declaredVars
                ] ++
                case _conclusionAttr of
                   Nothing -> []
                   Just _  ->
                     let metaVarsPremise = map preMeta (catMaybes _premisesIpremiseAttrs)
                     in _premisesIstaticErrors ++
                       [ DuplicateMetaVarInPremise _lhsIrulename x
                       | x <- duplicates metaVarsPremise
                       ] ++
                       [ DuplicateVar _lhsIrulename x
                       | x <- duplicates _declaredVars
                       ]
            (_lhsOstaticWarnings@_) =
                _conclusionIstaticWarnings ++ _premisesIstaticWarnings ++
                [ MetaVarNotUsed _lhsIrulename x
                | x <- map snd _conclusionMetaVarAL
                , x `notElem` _usedVars
                ] ++
                [ DeclaredAndUsedInPremise _lhsIrulename x
                | x <- _premisesIusedVars
                , x `elem` _premisesIdeclaredVars
                ]
            (_lhsOconclusionAttr@_) =
                _conclusionAttr
            (_declaredVars@_) =
                _premisesIdeclaredVars ++ _conclusionIdeclaredVars
            (_lhsOusedVars@_) =
                _usedVars
            (_usedVars@_) =
                nub (_premisesIusedVars ++ _conclusionIusedVars)
            (_premisesOmetaVarAL@_) =
                _conclusionMetaVarAL
            ((_staticErrorsConclusion@_,_conclusionAttr@_,_conclusionMetaVarAL@_)) =
                case (checkConclusion _lhsIrulename _lhsIjudgementsMap _lhsIaltArgTypesMap _lhsInts _conclusionIself) of
                  Escape errors           -> (errors, Nothing, [])
                  Continue conclusionAttr -> ([], Just conclusionAttr, metaVarAL conclusionAttr)
            (_premisesOisConclusion@_) =
                False
            (_conclusionOmetaVarAL@_) =
                []
            (_conclusionOisConclusion@_) =
                True
            (_lhsOallVariables@_) =
                _premisesIallVariables  ++  _conclusionIallVariables
            (_lhsOcset@_) =
                _premisesIcset  ++  _conclusionIcset
            (_lhsOdeclaredVars@_) =
                _declaredVars
            (_lhsOpremiseAttrs@_) =
                _premisesIpremiseAttrs  ++  _conclusionIpremiseAttrs
            (_self@_) =
                DeductionRule _premisesIself _conclusionIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _conclusionIunique
            (_premisesOagdatas@_) =
                _lhsIagdatas
            (_premisesOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_premisesOfunctions@_) =
                _lhsIfunctions
            (_premisesOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_premisesOnts@_) =
                _lhsInts
            (_premisesOrulename@_) =
                _lhsIrulename
            (_premisesOstrmap@_) =
                _lhsIstrmap
            (_premisesOunique@_) =
                _lhsIunique
            (_conclusionOagdatas@_) =
                _lhsIagdatas
            (_conclusionOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_conclusionOfunctions@_) =
                _lhsIfunctions
            (_conclusionOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_conclusionOnts@_) =
                _lhsInts
            (_conclusionOrulename@_) =
                _lhsIrulename
            (_conclusionOstrmap@_) =
                _lhsIstrmap
            (_conclusionOunique@_) =
                _premisesIunique
        in  ( _lhsOallVariables,_lhsOconclusionAttr,_lhsOcset,_lhsOdeclaredVars,_lhsOpremiseAttrs,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOunique,_lhsOusedVars)
-- Judgement ---------------------------------------------------
-- semantic domain
type T_Judgement = (AGDatas) ->
                   (AltArgTypesMap) ->
                   (FunctionEnvironment) ->
                   (Bool) ->
                   (JudgementsMap) ->
                   (VarAL) ->
                   ([String]) ->
                   (String) ->
                   ([(String, Int)]) ->
                   (Int) ->
                   ( ([String]),(CSet),([String]),(PremiseAttrs),(Judgement),(StaticMessages),(StaticMessages),(Int),([String]))
-- cata
sem_Judgement :: (Judgement) ->
                 (T_Judgement)
sem_Judgement ((Judgement (_inhs) (_expression) (_syns))) =
    (sem_Judgement_Judgement ((sem_Terms (_inhs))) ((sem_Term (_expression))) ((sem_Terms (_syns))))
sem_Judgement_Judgement :: (T_Terms) ->
                           (T_Term) ->
                           (T_Terms) ->
                           (T_Judgement)
sem_Judgement_Judgement (inhs_) (expression_) (syns_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIisConclusion
      _lhsIjudgementsMap
      _lhsImetaVarAL
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOdeclaredVars :: ([String])
            _lhsOpremiseAttrs :: (PremiseAttrs)
            _lhsOself :: (Judgement)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOunique :: (Int)
            _lhsOusedVars :: ([String])
            _inhsIallVariables :: ([String])
            _inhsIcset :: (CSet)
            _inhsIself :: (Terms)
            _inhsIstaticErrors :: (StaticMessages)
            _inhsIstaticWarnings :: (StaticMessages)
            _inhsItps :: (Tps)
            _inhsIunique :: (Int)
            _inhsOagdatas :: (AGDatas)
            _inhsOaltArgTypesMap :: (AltArgTypesMap)
            _inhsOfunctions :: (FunctionEnvironment)
            _inhsOjudgementsMap :: (JudgementsMap)
            _inhsOnts :: ([String])
            _inhsOrulename :: (String)
            _inhsOstrmap :: ([(String, Int)])
            _inhsOunique :: (Int)
            _expressionIallVariables :: ([String])
            _expressionIcset :: (CSet)
            _expressionIself :: (Term)
            _expressionIstaticErrors :: (StaticMessages)
            _expressionIstaticWarnings :: (StaticMessages)
            _expressionItp :: (Tp)
            _expressionIunique :: (Int)
            _expressionOagdatas :: (AGDatas)
            _expressionOaltArgTypesMap :: (AltArgTypesMap)
            _expressionOfunctions :: (FunctionEnvironment)
            _expressionOjudgementsMap :: (JudgementsMap)
            _expressionOnts :: ([String])
            _expressionOrulename :: (String)
            _expressionOstrmap :: ([(String, Int)])
            _expressionOunique :: (Int)
            _synsIallVariables :: ([String])
            _synsIcset :: (CSet)
            _synsIself :: (Terms)
            _synsIstaticErrors :: (StaticMessages)
            _synsIstaticWarnings :: (StaticMessages)
            _synsItps :: (Tps)
            _synsIunique :: (Int)
            _synsOagdatas :: (AGDatas)
            _synsOaltArgTypesMap :: (AltArgTypesMap)
            _synsOfunctions :: (FunctionEnvironment)
            _synsOjudgementsMap :: (JudgementsMap)
            _synsOnts :: ([String])
            _synsOrulename :: (String)
            _synsOstrmap :: ([(String, Int)])
            _synsOunique :: (Int)
            ( _inhsIallVariables,_inhsIcset,_inhsIself,_inhsIstaticErrors,_inhsIstaticWarnings,_inhsItps,_inhsIunique) =
                (inhs_ (_inhsOagdatas) (_inhsOaltArgTypesMap) (_inhsOfunctions) (_inhsOjudgementsMap) (_inhsOnts) (_inhsOrulename) (_inhsOstrmap) (_inhsOunique))
            ( _expressionIallVariables,_expressionIcset,_expressionIself,_expressionIstaticErrors,_expressionIstaticWarnings,_expressionItp,_expressionIunique) =
                (expression_ (_expressionOagdatas) (_expressionOaltArgTypesMap) (_expressionOfunctions) (_expressionOjudgementsMap) (_expressionOnts) (_expressionOrulename) (_expressionOstrmap) (_expressionOunique))
            ( _synsIallVariables,_synsIcset,_synsIself,_synsIstaticErrors,_synsIstaticWarnings,_synsItps,_synsIunique) =
                (syns_ (_synsOagdatas) (_synsOaltArgTypesMap) (_synsOfunctions) (_synsOjudgementsMap) (_synsOnts) (_synsOrulename) (_synsOstrmap) (_synsOunique))
            (_lhsOdeclaredVars@_) =
                if _lhsIisConclusion then _inhsIallVariables ++ _expressionIallVariables else _synsIallVariables
            (_lhsOusedVars@_) =
                if _lhsIisConclusion then _synsIallVariables else _inhsIallVariables ++ _expressionIallVariables
            ((_lhsOpremiseAttrs@_,_newErrors@_)) =
                if _lhsIisConclusion then ([], [])
                else
                  case (checkPremise _lhsIrulename _lhsIjudgementsMap _lhsImetaVarAL _self) of
                    Escape errors        -> ([Nothing], errors)
                    Continue premiseAttr -> ([Just premiseAttr], [])
            (_lhsOstaticErrors@_) =
                _inhsIstaticErrors ++ _expressionIstaticErrors ++ _newErrors ++ _synsIstaticErrors
            (_lhsOcset@_) =
                [ SumLeft $ Equality inh (TCon "Gamma") "(Gamma)" | inh <- _inhsItps ]
                ++ [SumLeft $ Equality _expressionItp (TCon "Expr") "(Expr)"] ++
                [ SumLeft $ Equality syn (TCon "Type") "(Type)" | syn <- _synsItps ]
                ++
                _inhsIcset ++ _expressionIcset ++ _synsIcset
            (_lhsOallVariables@_) =
                _inhsIallVariables  ++  _expressionIallVariables  ++  _synsIallVariables
            (_lhsOstaticWarnings@_) =
                _inhsIstaticWarnings  ++  _expressionIstaticWarnings  ++  _synsIstaticWarnings
            (_self@_) =
                Judgement _inhsIself _expressionIself _synsIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _synsIunique
            (_inhsOagdatas@_) =
                _lhsIagdatas
            (_inhsOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_inhsOfunctions@_) =
                _lhsIfunctions
            (_inhsOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_inhsOnts@_) =
                _lhsInts
            (_inhsOrulename@_) =
                _lhsIrulename
            (_inhsOstrmap@_) =
                _lhsIstrmap
            (_inhsOunique@_) =
                _lhsIunique
            (_expressionOagdatas@_) =
                _lhsIagdatas
            (_expressionOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_expressionOfunctions@_) =
                _lhsIfunctions
            (_expressionOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_expressionOnts@_) =
                _lhsInts
            (_expressionOrulename@_) =
                _lhsIrulename
            (_expressionOstrmap@_) =
                _lhsIstrmap
            (_expressionOunique@_) =
                _inhsIunique
            (_synsOagdatas@_) =
                _lhsIagdatas
            (_synsOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_synsOfunctions@_) =
                _lhsIfunctions
            (_synsOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_synsOnts@_) =
                _lhsInts
            (_synsOrulename@_) =
                _lhsIrulename
            (_synsOstrmap@_) =
                _lhsIstrmap
            (_synsOunique@_) =
                _expressionIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOdeclaredVars,_lhsOpremiseAttrs,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOunique,_lhsOusedVars)
-- JudgementDecl -----------------------------------------------
-- semantic domain
type T_JudgementDecl = ([String]) ->
                       ( (JudgementsAL),(JudgementDecl),(StaticMessages))
-- cata
sem_JudgementDecl :: (JudgementDecl) ->
                     (T_JudgementDecl)
sem_JudgementDecl ((JudgementDecl (_datatype) (_inhs) (_syns))) =
    (sem_JudgementDecl_JudgementDecl (_datatype) (_inhs) (_syns))
sem_JudgementDecl_JudgementDecl :: (String) ->
                                   ([String]) ->
                                   ([String]) ->
                                   (T_JudgementDecl)
sem_JudgementDecl_JudgementDecl (datatype_) (inhs_) (syns_) =
    \ _lhsItypes ->
        let _lhsOjudgements :: (JudgementsAL)
            _lhsOself :: (JudgementDecl)
            _lhsOstaticErrors :: (StaticMessages)
            (_lhsOjudgements@_) =
                [(datatype_, (inhs_, syns_))]
            (_lhsOstaticErrors@_) =
                [ UnknownType datatype_ tp
                | tp <- inhs_ ++ syns_
                , tp `notElem` _lhsItypes
                ]
            (_self@_) =
                JudgementDecl datatype_ inhs_ syns_
            (_lhsOself@_) =
                _self
        in  ( _lhsOjudgements,_lhsOself,_lhsOstaticErrors)
-- JudgementDecls ----------------------------------------------
-- semantic domain
type T_JudgementDecls = ([String]) ->
                        ( (JudgementsAL),(JudgementDecls),(StaticMessages))
-- cata
sem_JudgementDecls :: (JudgementDecls) ->
                      (T_JudgementDecls)
sem_JudgementDecls (list) =
    (foldr (sem_JudgementDecls_Cons) (sem_JudgementDecls_Nil) ((map sem_JudgementDecl list)))
sem_JudgementDecls_Cons :: (T_JudgementDecl) ->
                           (T_JudgementDecls) ->
                           (T_JudgementDecls)
sem_JudgementDecls_Cons (hd_) (tl_) =
    \ _lhsItypes ->
        let _lhsOjudgements :: (JudgementsAL)
            _lhsOself :: (JudgementDecls)
            _lhsOstaticErrors :: (StaticMessages)
            _hdIjudgements :: (JudgementsAL)
            _hdIself :: (JudgementDecl)
            _hdIstaticErrors :: (StaticMessages)
            _hdOtypes :: ([String])
            _tlIjudgements :: (JudgementsAL)
            _tlIself :: (JudgementDecls)
            _tlIstaticErrors :: (StaticMessages)
            _tlOtypes :: ([String])
            ( _hdIjudgements,_hdIself,_hdIstaticErrors) =
                (hd_ (_hdOtypes))
            ( _tlIjudgements,_tlIself,_tlIstaticErrors) =
                (tl_ (_tlOtypes))
            (_lhsOjudgements@_) =
                _hdIjudgements  ++  _tlIjudgements
            (_lhsOstaticErrors@_) =
                _hdIstaticErrors  ++  _tlIstaticErrors
            (_self@_) =
                (:) _hdIself _tlIself
            (_lhsOself@_) =
                _self
            (_hdOtypes@_) =
                _lhsItypes
            (_tlOtypes@_) =
                _lhsItypes
        in  ( _lhsOjudgements,_lhsOself,_lhsOstaticErrors)
sem_JudgementDecls_Nil :: (T_JudgementDecls)
sem_JudgementDecls_Nil  =
    \ _lhsItypes ->
        let _lhsOjudgements :: (JudgementsAL)
            _lhsOself :: (JudgementDecls)
            _lhsOstaticErrors :: (StaticMessages)
            (_lhsOjudgements@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_self@_) =
                []
            (_lhsOself@_) =
                _self
        in  ( _lhsOjudgements,_lhsOself,_lhsOstaticErrors)
-- Judgements --------------------------------------------------
-- semantic domain
type T_Judgements = (AGDatas) ->
                    (AltArgTypesMap) ->
                    (FunctionEnvironment) ->
                    (Bool) ->
                    (JudgementsMap) ->
                    (VarAL) ->
                    ([String]) ->
                    (String) ->
                    ([(String, Int)]) ->
                    (Int) ->
                    ( ([String]),(CSet),([String]),(PremiseAttrs),(Judgements),(StaticMessages),(StaticMessages),(Int),([String]))
-- cata
sem_Judgements :: (Judgements) ->
                  (T_Judgements)
sem_Judgements (list) =
    (foldr (sem_Judgements_Cons) (sem_Judgements_Nil) ((map sem_Judgement list)))
sem_Judgements_Cons :: (T_Judgement) ->
                       (T_Judgements) ->
                       (T_Judgements)
sem_Judgements_Cons (hd_) (tl_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIisConclusion
      _lhsIjudgementsMap
      _lhsImetaVarAL
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOdeclaredVars :: ([String])
            _lhsOpremiseAttrs :: (PremiseAttrs)
            _lhsOself :: (Judgements)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOunique :: (Int)
            _lhsOusedVars :: ([String])
            _hdIallVariables :: ([String])
            _hdIcset :: (CSet)
            _hdIdeclaredVars :: ([String])
            _hdIpremiseAttrs :: (PremiseAttrs)
            _hdIself :: (Judgement)
            _hdIstaticErrors :: (StaticMessages)
            _hdIstaticWarnings :: (StaticMessages)
            _hdIunique :: (Int)
            _hdIusedVars :: ([String])
            _hdOagdatas :: (AGDatas)
            _hdOaltArgTypesMap :: (AltArgTypesMap)
            _hdOfunctions :: (FunctionEnvironment)
            _hdOisConclusion :: (Bool)
            _hdOjudgementsMap :: (JudgementsMap)
            _hdOmetaVarAL :: (VarAL)
            _hdOnts :: ([String])
            _hdOrulename :: (String)
            _hdOstrmap :: ([(String, Int)])
            _hdOunique :: (Int)
            _tlIallVariables :: ([String])
            _tlIcset :: (CSet)
            _tlIdeclaredVars :: ([String])
            _tlIpremiseAttrs :: (PremiseAttrs)
            _tlIself :: (Judgements)
            _tlIstaticErrors :: (StaticMessages)
            _tlIstaticWarnings :: (StaticMessages)
            _tlIunique :: (Int)
            _tlIusedVars :: ([String])
            _tlOagdatas :: (AGDatas)
            _tlOaltArgTypesMap :: (AltArgTypesMap)
            _tlOfunctions :: (FunctionEnvironment)
            _tlOisConclusion :: (Bool)
            _tlOjudgementsMap :: (JudgementsMap)
            _tlOmetaVarAL :: (VarAL)
            _tlOnts :: ([String])
            _tlOrulename :: (String)
            _tlOstrmap :: ([(String, Int)])
            _tlOunique :: (Int)
            ( _hdIallVariables,_hdIcset,_hdIdeclaredVars,_hdIpremiseAttrs,_hdIself,_hdIstaticErrors,_hdIstaticWarnings,_hdIunique,_hdIusedVars) =
                (hd_ (_hdOagdatas) (_hdOaltArgTypesMap) (_hdOfunctions) (_hdOisConclusion) (_hdOjudgementsMap) (_hdOmetaVarAL) (_hdOnts) (_hdOrulename) (_hdOstrmap) (_hdOunique))
            ( _tlIallVariables,_tlIcset,_tlIdeclaredVars,_tlIpremiseAttrs,_tlIself,_tlIstaticErrors,_tlIstaticWarnings,_tlIunique,_tlIusedVars) =
                (tl_ (_tlOagdatas) (_tlOaltArgTypesMap) (_tlOfunctions) (_tlOisConclusion) (_tlOjudgementsMap) (_tlOmetaVarAL) (_tlOnts) (_tlOrulename) (_tlOstrmap) (_tlOunique))
            (_lhsOallVariables@_) =
                _hdIallVariables  ++  _tlIallVariables
            (_lhsOcset@_) =
                _hdIcset  ++  _tlIcset
            (_lhsOdeclaredVars@_) =
                _hdIdeclaredVars  ++  _tlIdeclaredVars
            (_lhsOpremiseAttrs@_) =
                _hdIpremiseAttrs  ++  _tlIpremiseAttrs
            (_lhsOstaticErrors@_) =
                _hdIstaticErrors  ++  _tlIstaticErrors
            (_lhsOstaticWarnings@_) =
                _hdIstaticWarnings  ++  _tlIstaticWarnings
            (_lhsOusedVars@_) =
                _hdIusedVars  ++  _tlIusedVars
            (_self@_) =
                (:) _hdIself _tlIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _tlIunique
            (_hdOagdatas@_) =
                _lhsIagdatas
            (_hdOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_hdOfunctions@_) =
                _lhsIfunctions
            (_hdOisConclusion@_) =
                _lhsIisConclusion
            (_hdOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_hdOmetaVarAL@_) =
                _lhsImetaVarAL
            (_hdOnts@_) =
                _lhsInts
            (_hdOrulename@_) =
                _lhsIrulename
            (_hdOstrmap@_) =
                _lhsIstrmap
            (_hdOunique@_) =
                _lhsIunique
            (_tlOagdatas@_) =
                _lhsIagdatas
            (_tlOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_tlOfunctions@_) =
                _lhsIfunctions
            (_tlOisConclusion@_) =
                _lhsIisConclusion
            (_tlOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_tlOmetaVarAL@_) =
                _lhsImetaVarAL
            (_tlOnts@_) =
                _lhsInts
            (_tlOrulename@_) =
                _lhsIrulename
            (_tlOstrmap@_) =
                _lhsIstrmap
            (_tlOunique@_) =
                _hdIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOdeclaredVars,_lhsOpremiseAttrs,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOunique,_lhsOusedVars)
sem_Judgements_Nil :: (T_Judgements)
sem_Judgements_Nil  =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIisConclusion
      _lhsIjudgementsMap
      _lhsImetaVarAL
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOdeclaredVars :: ([String])
            _lhsOpremiseAttrs :: (PremiseAttrs)
            _lhsOself :: (Judgements)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOunique :: (Int)
            _lhsOusedVars :: ([String])
            (_lhsOallVariables@_) =
                []
            (_lhsOcset@_) =
                []
            (_lhsOdeclaredVars@_) =
                []
            (_lhsOpremiseAttrs@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_lhsOusedVars@_) =
                []
            (_self@_) =
                []
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOdeclaredVars,_lhsOpremiseAttrs,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOunique,_lhsOusedVars)
-- Term --------------------------------------------------------
-- semantic domain
type T_Term = (AGDatas) ->
              (AltArgTypesMap) ->
              (FunctionEnvironment) ->
              (JudgementsMap) ->
              ([String]) ->
              (String) ->
              ([(String, Int)]) ->
              (Int) ->
              ( ([String]),(CSet),(Term),(StaticMessages),(StaticMessages),(Tp),(Int))
-- cata
sem_Term :: (Term) ->
            (T_Term)
sem_Term ((TermApp (_function) (_arguments))) =
    (sem_Term_TermApp (_function) ((sem_Terms (_arguments))))
sem_Term ((TermString (_string))) =
    (sem_Term_TermString (_string))
sem_Term ((TermVar (_variable))) =
    (sem_Term_TermVar (_variable))
sem_Term_TermApp :: (String) ->
                    (T_Terms) ->
                    (T_Term)
sem_Term_TermApp (function_) (arguments_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (Term)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtp :: (Tp)
            _lhsOunique :: (Int)
            _argumentsIallVariables :: ([String])
            _argumentsIcset :: (CSet)
            _argumentsIself :: (Terms)
            _argumentsIstaticErrors :: (StaticMessages)
            _argumentsIstaticWarnings :: (StaticMessages)
            _argumentsItps :: (Tps)
            _argumentsIunique :: (Int)
            _argumentsOagdatas :: (AGDatas)
            _argumentsOaltArgTypesMap :: (AltArgTypesMap)
            _argumentsOfunctions :: (FunctionEnvironment)
            _argumentsOjudgementsMap :: (JudgementsMap)
            _argumentsOnts :: ([String])
            _argumentsOrulename :: (String)
            _argumentsOstrmap :: ([(String, Int)])
            _argumentsOunique :: (Int)
            ( _argumentsIallVariables,_argumentsIcset,_argumentsIself,_argumentsIstaticErrors,_argumentsIstaticWarnings,_argumentsItps,_argumentsIunique) =
                (arguments_ (_argumentsOagdatas) (_argumentsOaltArgTypesMap) (_argumentsOfunctions) (_argumentsOjudgementsMap) (_argumentsOnts) (_argumentsOrulename) (_argumentsOstrmap) (_argumentsOunique))
            (_lhsOstaticErrors@_) =
                [ FunctionNotDefined _lhsIrulename function_
                | function_ `notElem` keysFM _lhsIfunctions
                ] ++
                _argumentsIstaticErrors
            (_argumentsOunique@_) =
                _lhsIunique + 1
            (_lhsOcset@_) =
                (SumRight $ Instantiate
                   (foldr (.->.) (TVar _lhsIunique) _argumentsItps)
                   (SigmaScheme $ lookupWithDefaultFM _lhsIfunctions (error "unknown function") function_)
                   ("apply " ++ function_ ++ " in " ++ _lhsIrulename))
                    : _argumentsIcset
            (_lhsOtp@_) =
                TVar _lhsIunique
            (_lhsOallVariables@_) =
                _argumentsIallVariables
            (_lhsOstaticWarnings@_) =
                _argumentsIstaticWarnings
            (_self@_) =
                TermApp function_ _argumentsIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _argumentsIunique
            (_argumentsOagdatas@_) =
                _lhsIagdatas
            (_argumentsOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_argumentsOfunctions@_) =
                _lhsIfunctions
            (_argumentsOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_argumentsOnts@_) =
                _lhsInts
            (_argumentsOrulename@_) =
                _lhsIrulename
            (_argumentsOstrmap@_) =
                _lhsIstrmap
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtp,_lhsOunique)
sem_Term_TermString :: (String) ->
                       (T_Term)
sem_Term_TermString (string_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (Term)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtp :: (Tp)
            _lhsOunique :: (Int)
            (_lhsOtp@_) =
                TCon "String"
            (_lhsOallVariables@_) =
                []
            (_lhsOcset@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_self@_) =
                TermString string_
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtp,_lhsOunique)
sem_Term_TermVar :: (String) ->
                    (T_Term)
sem_Term_TermVar (variable_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (Term)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtp :: (Tp)
            _lhsOunique :: (Int)
            (_lhsOallVariables@_) =
                [variable_]
            (_lhsOtp@_) =
                TVar (variable_ ? _lhsIstrmap)
            (_lhsOcset@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_self@_) =
                TermVar variable_
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtp,_lhsOunique)
-- Terms -------------------------------------------------------
-- semantic domain
type T_Terms = (AGDatas) ->
               (AltArgTypesMap) ->
               (FunctionEnvironment) ->
               (JudgementsMap) ->
               ([String]) ->
               (String) ->
               ([(String, Int)]) ->
               (Int) ->
               ( ([String]),(CSet),(Terms),(StaticMessages),(StaticMessages),(Tps),(Int))
-- cata
sem_Terms :: (Terms) ->
             (T_Terms)
sem_Terms (list) =
    (foldr (sem_Terms_Cons) (sem_Terms_Nil) ((map sem_Term list)))
sem_Terms_Cons :: (T_Term) ->
                  (T_Terms) ->
                  (T_Terms)
sem_Terms_Cons (hd_) (tl_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (Terms)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtps :: (Tps)
            _lhsOunique :: (Int)
            _hdIallVariables :: ([String])
            _hdIcset :: (CSet)
            _hdIself :: (Term)
            _hdIstaticErrors :: (StaticMessages)
            _hdIstaticWarnings :: (StaticMessages)
            _hdItp :: (Tp)
            _hdIunique :: (Int)
            _hdOagdatas :: (AGDatas)
            _hdOaltArgTypesMap :: (AltArgTypesMap)
            _hdOfunctions :: (FunctionEnvironment)
            _hdOjudgementsMap :: (JudgementsMap)
            _hdOnts :: ([String])
            _hdOrulename :: (String)
            _hdOstrmap :: ([(String, Int)])
            _hdOunique :: (Int)
            _tlIallVariables :: ([String])
            _tlIcset :: (CSet)
            _tlIself :: (Terms)
            _tlIstaticErrors :: (StaticMessages)
            _tlIstaticWarnings :: (StaticMessages)
            _tlItps :: (Tps)
            _tlIunique :: (Int)
            _tlOagdatas :: (AGDatas)
            _tlOaltArgTypesMap :: (AltArgTypesMap)
            _tlOfunctions :: (FunctionEnvironment)
            _tlOjudgementsMap :: (JudgementsMap)
            _tlOnts :: ([String])
            _tlOrulename :: (String)
            _tlOstrmap :: ([(String, Int)])
            _tlOunique :: (Int)
            ( _hdIallVariables,_hdIcset,_hdIself,_hdIstaticErrors,_hdIstaticWarnings,_hdItp,_hdIunique) =
                (hd_ (_hdOagdatas) (_hdOaltArgTypesMap) (_hdOfunctions) (_hdOjudgementsMap) (_hdOnts) (_hdOrulename) (_hdOstrmap) (_hdOunique))
            ( _tlIallVariables,_tlIcset,_tlIself,_tlIstaticErrors,_tlIstaticWarnings,_tlItps,_tlIunique) =
                (tl_ (_tlOagdatas) (_tlOaltArgTypesMap) (_tlOfunctions) (_tlOjudgementsMap) (_tlOnts) (_tlOrulename) (_tlOstrmap) (_tlOunique))
            (_lhsOtps@_) =
                _hdItp : _tlItps
            (_lhsOallVariables@_) =
                _hdIallVariables  ++  _tlIallVariables
            (_lhsOcset@_) =
                _hdIcset  ++  _tlIcset
            (_lhsOstaticErrors@_) =
                _hdIstaticErrors  ++  _tlIstaticErrors
            (_lhsOstaticWarnings@_) =
                _hdIstaticWarnings  ++  _tlIstaticWarnings
            (_self@_) =
                (:) _hdIself _tlIself
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _tlIunique
            (_hdOagdatas@_) =
                _lhsIagdatas
            (_hdOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_hdOfunctions@_) =
                _lhsIfunctions
            (_hdOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_hdOnts@_) =
                _lhsInts
            (_hdOrulename@_) =
                _lhsIrulename
            (_hdOstrmap@_) =
                _lhsIstrmap
            (_hdOunique@_) =
                _lhsIunique
            (_tlOagdatas@_) =
                _lhsIagdatas
            (_tlOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_tlOfunctions@_) =
                _lhsIfunctions
            (_tlOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_tlOnts@_) =
                _lhsInts
            (_tlOrulename@_) =
                _lhsIrulename
            (_tlOstrmap@_) =
                _lhsIstrmap
            (_tlOunique@_) =
                _hdIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtps,_lhsOunique)
sem_Terms_Nil :: (T_Terms)
sem_Terms_Nil  =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts
      _lhsIrulename
      _lhsIstrmap
      _lhsIunique ->
        let _lhsOallVariables :: ([String])
            _lhsOcset :: (CSet)
            _lhsOself :: (Terms)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtps :: (Tps)
            _lhsOunique :: (Int)
            (_lhsOtps@_) =
                []
            (_lhsOallVariables@_) =
                []
            (_lhsOcset@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_self@_) =
                []
            (_lhsOself@_) =
                _self
            (_lhsOunique@_) =
                _lhsIunique
        in  ( _lhsOallVariables,_lhsOcset,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtps,_lhsOunique)
-- TypeRule ----------------------------------------------------
-- semantic domain
type T_TypeRule = (AGDatas) ->
                  (AltArgTypesMap) ->
                  (ClassEnvironment) ->
                  (FunctionEnvironment) ->
                  (JudgementsMap) ->
                  ([String]) ->
                  ( (AGSems),([String]),(TypeRule),(StaticMessages),(StaticMessages),(TypeErrors))
-- cata
sem_TypeRule :: (TypeRule) ->
                (T_TypeRule)
sem_TypeRule ((TypeRule (_rulename) (_deduction) (_constraints))) =
    (sem_TypeRule_TypeRule (_rulename) ((sem_DeductionRule (_deduction))) ((sem_ConstraintTerms (_constraints))))
sem_TypeRule_TypeRule :: (String) ->
                         (T_DeductionRule) ->
                         (T_ConstraintTerms) ->
                         (T_TypeRule)
sem_TypeRule_TypeRule (rulename_) (deduction_) (constraints_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIclassEnvironment
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts ->
        let _lhsOagsems :: (AGSems)
            _lhsOrulenames :: ([String])
            _lhsOself :: (TypeRule)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtypeErrors :: (TypeErrors)
            _deductionIallVariables :: ([String])
            _deductionIconclusionAttr :: (Maybe ConclusionAttr)
            _deductionIcset :: (CSet)
            _deductionIdeclaredVars :: ([String])
            _deductionIpremiseAttrs :: (PremiseAttrs)
            _deductionIself :: (DeductionRule)
            _deductionIstaticErrors :: (StaticMessages)
            _deductionIstaticWarnings :: (StaticMessages)
            _deductionIunique :: (Int)
            _deductionIusedVars :: ([String])
            _deductionOagdatas :: (AGDatas)
            _deductionOaltArgTypesMap :: (AltArgTypesMap)
            _deductionOfunctions :: (FunctionEnvironment)
            _deductionOjudgementsMap :: (JudgementsMap)
            _deductionOnts :: ([String])
            _deductionOrulename :: (String)
            _deductionOstrmap :: ([(String, Int)])
            _deductionOunique :: (Int)
            _constraintsIallVariables :: ([String])
            _constraintsIcset :: (CSet)
            _constraintsIself :: (ConstraintTerms)
            _constraintsIstaticErrors :: (StaticMessages)
            _constraintsIstaticWarnings :: (StaticMessages)
            _constraintsItps :: (Tps)
            _constraintsIunique :: (Int)
            _constraintsOagdatas :: (AGDatas)
            _constraintsOaltArgTypesMap :: (AltArgTypesMap)
            _constraintsOfunctions :: (FunctionEnvironment)
            _constraintsOjudgementsMap :: (JudgementsMap)
            _constraintsOnts :: ([String])
            _constraintsOrulename :: (String)
            _constraintsOstrmap :: ([(String, Int)])
            _constraintsOunique :: (Int)
            ( _deductionIallVariables,_deductionIconclusionAttr,_deductionIcset,_deductionIdeclaredVars,_deductionIpremiseAttrs,_deductionIself,_deductionIstaticErrors,_deductionIstaticWarnings,_deductionIunique,_deductionIusedVars) =
                (deduction_ (_deductionOagdatas) (_deductionOaltArgTypesMap) (_deductionOfunctions) (_deductionOjudgementsMap) (_deductionOnts) (_deductionOrulename) (_deductionOstrmap) (_deductionOunique))
            ( _constraintsIallVariables,_constraintsIcset,_constraintsIself,_constraintsIstaticErrors,_constraintsIstaticWarnings,_constraintsItps,_constraintsIunique) =
                (constraints_ (_constraintsOagdatas) (_constraintsOaltArgTypesMap) (_constraintsOfunctions) (_constraintsOjudgementsMap) (_constraintsOnts) (_constraintsOrulename) (_constraintsOstrmap) (_constraintsOunique))
            (_constraintsOrulename@_) =
                rulename_
            (_deductionOrulename@_) =
                rulename_
            (_lhsOrulenames@_) =
                [rulename_]
            (_lhsOtypeErrors@_) =
                errorsFromResult _solveResult
            (_sub@_) =
                substitutionFromResult _solveResult
            (_solveResult@_) =
                runGreedy _lhsIclassEnvironment noOrderedTypeSynonyms _constraintsIunique _cset
                   :: SolveResult String Predicates ()
            (_cset@_) =
                [ SumLeft $ Equality tp (TCon "Constraint") "(Constraint)"
                | tp <- _constraintsItps
                ] ++
                _deductionIcset ++ _constraintsIcset
            (_nubVars@_) =
                nub (_deductionIallVariables ++ _constraintsIallVariables)
            (_deductionOunique@_) =
                length _nubVars
            (_strmap@_) =
                zip _nubVars [0..]
            (_semVars@_) =
                AGSemDecl _firstChild "unique" ("@lhs.unique + " ++ show (length _newvarmap)) :
                [ AGSemDecl "loc" fresh ("makeFresh (@lhs.unique + " ++ show i ++ ") :: " ++ show inferred)
                | ((original, fresh), i) <- zip _newvarmap [0..]
                , let inferred = _sub |-> TVar (original ? _strmap)
                ]
            (_semGamma@_) =
                [ AGSemDecl (cn ? _metamap) "gamma" (gamma _varmap)
                | PremiseAttr cn gamma _ <- _deductionIpremiseAttrs
                ]
            (_semTp@_) =
                AGSemDecl "lhs" "tp" (metaVarAL _deductionIconclusionAttr _varmap)
            (_semCSet@_) =
                AGSemDecl "lhs" "cset"
                   (concat $ intersperse " ++ " $
                      [ "@"++s++".cset" | (s, tp) <- _dataChildren, tp == "Expr" ] ++
                      [ bracks (concat $ intersperse ", " $ map (showConstraintTerm _varmap) _constraintsIself) ]
                   )
            (_newvarmap@_) =
                [ (s, "freshVar"++show i) | (s, i) <- zip _freshVars [0..] ]
            (_metamap@_) =
                zip (conInhVars _deductionIconclusionAttr) (map fst _dataChildren)
            (_varmap@_) =
                (conGamma _deductionIconclusionAttr, "@lhs.gamma") :
                [ (x, '@':y) | (x, y) <- _newvarmap ] ++
                [ (x, '@':y) | (x, y) <- _metamap ] ++
                [ (y, '@':(x ? _metamap)++".tp") | PremiseAttr x _ y <- _deductionIpremiseAttrs ]
            (_freshVars@_) =
                _allVars \\ ( conGamma _deductionIconclusionAttr
                            : conInhVars _deductionIconclusionAttr
                            ++ map preMetaType _deductionIpremiseAttrs)
            (_allVars@_) =
                nub (_deductionIallVariables ++ _constraintsIallVariables)
            (_lhsOagsems@_) =
                [ AGSem _dataNT (conAlternative _deductionIconclusionAttr) (_semCSet : _semTp : _semGamma ++ _semVars) ]
            (_firstChild@_) =
                case filter ((=="Expr") . snd) _dataChildren of
                   []      -> "lhs"
                   (x,_):_ -> x
            ((_dataNT@_,_dataChildren@_)) =
                case [ (nt, cs)
                     | AGData nt alt cs <- _lhsIagdatas
                     , alt == conAlternative _deductionIconclusionAttr ] of
                   [pair] -> pair
                   _ -> error "could not find the corresponding data"
            (_lhsOstaticErrors@_) =
                _deductionIstaticErrors  ++  _constraintsIstaticErrors
            (_lhsOstaticWarnings@_) =
                _deductionIstaticWarnings  ++  _constraintsIstaticWarnings
            (_self@_) =
                TypeRule rulename_ _deductionIself _constraintsIself
            (_lhsOself@_) =
                _self
            (_deductionOagdatas@_) =
                _lhsIagdatas
            (_deductionOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_deductionOfunctions@_) =
                _lhsIfunctions
            (_deductionOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_deductionOnts@_) =
                _lhsInts
            (_deductionOstrmap@_) =
                _strmap
            (_constraintsOagdatas@_) =
                _lhsIagdatas
            (_constraintsOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_constraintsOfunctions@_) =
                _lhsIfunctions
            (_constraintsOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_constraintsOnts@_) =
                _lhsInts
            (_constraintsOstrmap@_) =
                _strmap
            (_constraintsOunique@_) =
                _deductionIunique
        in  ( _lhsOagsems,_lhsOrulenames,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtypeErrors)
-- TypeRules ---------------------------------------------------
-- semantic domain
type T_TypeRules = (AGDatas) ->
                   (AltArgTypesMap) ->
                   (ClassEnvironment) ->
                   (FunctionEnvironment) ->
                   (JudgementsMap) ->
                   ([String]) ->
                   ( (AGSems),([String]),(TypeRules),(StaticMessages),(StaticMessages),(TypeErrors))
-- cata
sem_TypeRules :: (TypeRules) ->
                 (T_TypeRules)
sem_TypeRules (list) =
    (foldr (sem_TypeRules_Cons) (sem_TypeRules_Nil) ((map sem_TypeRule list)))
sem_TypeRules_Cons :: (T_TypeRule) ->
                      (T_TypeRules) ->
                      (T_TypeRules)
sem_TypeRules_Cons (hd_) (tl_) =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIclassEnvironment
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts ->
        let _lhsOagsems :: (AGSems)
            _lhsOrulenames :: ([String])
            _lhsOself :: (TypeRules)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtypeErrors :: (TypeErrors)
            _hdIagsems :: (AGSems)
            _hdIrulenames :: ([String])
            _hdIself :: (TypeRule)
            _hdIstaticErrors :: (StaticMessages)
            _hdIstaticWarnings :: (StaticMessages)
            _hdItypeErrors :: (TypeErrors)
            _hdOagdatas :: (AGDatas)
            _hdOaltArgTypesMap :: (AltArgTypesMap)
            _hdOclassEnvironment :: (ClassEnvironment)
            _hdOfunctions :: (FunctionEnvironment)
            _hdOjudgementsMap :: (JudgementsMap)
            _hdOnts :: ([String])
            _tlIagsems :: (AGSems)
            _tlIrulenames :: ([String])
            _tlIself :: (TypeRules)
            _tlIstaticErrors :: (StaticMessages)
            _tlIstaticWarnings :: (StaticMessages)
            _tlItypeErrors :: (TypeErrors)
            _tlOagdatas :: (AGDatas)
            _tlOaltArgTypesMap :: (AltArgTypesMap)
            _tlOclassEnvironment :: (ClassEnvironment)
            _tlOfunctions :: (FunctionEnvironment)
            _tlOjudgementsMap :: (JudgementsMap)
            _tlOnts :: ([String])
            ( _hdIagsems,_hdIrulenames,_hdIself,_hdIstaticErrors,_hdIstaticWarnings,_hdItypeErrors) =
                (hd_ (_hdOagdatas) (_hdOaltArgTypesMap) (_hdOclassEnvironment) (_hdOfunctions) (_hdOjudgementsMap) (_hdOnts))
            ( _tlIagsems,_tlIrulenames,_tlIself,_tlIstaticErrors,_tlIstaticWarnings,_tlItypeErrors) =
                (tl_ (_tlOagdatas) (_tlOaltArgTypesMap) (_tlOclassEnvironment) (_tlOfunctions) (_tlOjudgementsMap) (_tlOnts))
            (_lhsOagsems@_) =
                _hdIagsems  ++  _tlIagsems
            (_lhsOrulenames@_) =
                _hdIrulenames  ++  _tlIrulenames
            (_lhsOstaticErrors@_) =
                _hdIstaticErrors  ++  _tlIstaticErrors
            (_lhsOstaticWarnings@_) =
                _hdIstaticWarnings  ++  _tlIstaticWarnings
            (_lhsOtypeErrors@_) =
                _hdItypeErrors  ++  _tlItypeErrors
            (_self@_) =
                (:) _hdIself _tlIself
            (_lhsOself@_) =
                _self
            (_hdOagdatas@_) =
                _lhsIagdatas
            (_hdOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_hdOclassEnvironment@_) =
                _lhsIclassEnvironment
            (_hdOfunctions@_) =
                _lhsIfunctions
            (_hdOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_hdOnts@_) =
                _lhsInts
            (_tlOagdatas@_) =
                _lhsIagdatas
            (_tlOaltArgTypesMap@_) =
                _lhsIaltArgTypesMap
            (_tlOclassEnvironment@_) =
                _lhsIclassEnvironment
            (_tlOfunctions@_) =
                _lhsIfunctions
            (_tlOjudgementsMap@_) =
                _lhsIjudgementsMap
            (_tlOnts@_) =
                _lhsInts
        in  ( _lhsOagsems,_lhsOrulenames,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtypeErrors)
sem_TypeRules_Nil :: (T_TypeRules)
sem_TypeRules_Nil  =
    \ _lhsIagdatas
      _lhsIaltArgTypesMap
      _lhsIclassEnvironment
      _lhsIfunctions
      _lhsIjudgementsMap
      _lhsInts ->
        let _lhsOagsems :: (AGSems)
            _lhsOrulenames :: ([String])
            _lhsOself :: (TypeRules)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _lhsOtypeErrors :: (TypeErrors)
            (_lhsOagsems@_) =
                []
            (_lhsOrulenames@_) =
                []
            (_lhsOstaticErrors@_) =
                []
            (_lhsOstaticWarnings@_) =
                []
            (_lhsOtypeErrors@_) =
                []
            (_self@_) =
                []
            (_lhsOself@_) =
                _self
        in  ( _lhsOagsems,_lhsOrulenames,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings,_lhsOtypeErrors)
-- TypeSystem --------------------------------------------------
-- semantic domain
type T_TypeSystem = (ClassEnvironment) ->
                    (FunctionEnvironment) ->
                    ( (AGCode),(TypeSystem),(StaticMessages),(StaticMessages))
-- cata
sem_TypeSystem :: (TypeSystem) ->
                  (T_TypeSystem)
sem_TypeSystem ((TypeSystem (_agDATAs) (_judgementdecls) (_typerules))) =
    (sem_TypeSystem_TypeSystem ((sem_AGDatas (_agDATAs))) ((sem_JudgementDecls (_judgementdecls))) ((sem_TypeRules (_typerules))))
sem_TypeSystem_TypeSystem :: (T_AGDatas) ->
                             (T_JudgementDecls) ->
                             (T_TypeRules) ->
                             (T_TypeSystem)
sem_TypeSystem_TypeSystem (agDATAs_) (judgementdecls_) (typerules_) =
    \ _lhsIclassEnvironment
      _lhsIfunctions ->
        let _lhsOagcode :: (AGCode)
            _lhsOself :: (TypeSystem)
            _lhsOstaticErrors :: (StaticMessages)
            _lhsOstaticWarnings :: (StaticMessages)
            _agDATAsIaltArgTypes :: (AltArgTypesAL)
            _agDATAsIaltNts :: (AltNts)
            _agDATAsIaltTypes :: (AltTypesAL)
            _agDATAsIself :: (AGDatas)
            _judgementdeclsIjudgements :: (JudgementsAL)
            _judgementdeclsIself :: (JudgementDecls)
            _judgementdeclsIstaticErrors :: (StaticMessages)
            _judgementdeclsOtypes :: ([String])
            _typerulesIagsems :: (AGSems)
            _typerulesIrulenames :: ([String])
            _typerulesIself :: (TypeRules)
            _typerulesIstaticErrors :: (StaticMessages)
            _typerulesIstaticWarnings :: (StaticMessages)
            _typerulesItypeErrors :: (TypeErrors)
            _typerulesOagdatas :: (AGDatas)
            _typerulesOaltArgTypesMap :: (AltArgTypesMap)
            _typerulesOclassEnvironment :: (ClassEnvironment)
            _typerulesOfunctions :: (FunctionEnvironment)
            _typerulesOjudgementsMap :: (JudgementsMap)
            _typerulesOnts :: ([String])
            ( _agDATAsIaltArgTypes,_agDATAsIaltNts,_agDATAsIaltTypes,_agDATAsIself) =
                (agDATAs_ )
            ( _judgementdeclsIjudgements,_judgementdeclsIself,_judgementdeclsIstaticErrors) =
                (judgementdecls_ (_judgementdeclsOtypes))
            ( _typerulesIagsems,_typerulesIrulenames,_typerulesIself,_typerulesIstaticErrors,_typerulesIstaticWarnings,_typerulesItypeErrors) =
                (typerules_ (_typerulesOagdatas) (_typerulesOaltArgTypesMap) (_typerulesOclassEnvironment) (_typerulesOfunctions) (_typerulesOjudgementsMap) (_typerulesOnts))
            (_errorsAfterWhichTyperulesAreSkipped@_) =
                _ntNotDefined ++ _ntMissesJudgement ++ _dupAlternative ++ _judgementdeclsIstaticErrors
            (_ntMissesJudgement@_) =
                [ MissesJudgement nt
                | nt <- _agnts
                , not (nt `elem` _judgementsnts)
                ]
            (_ntNotDefined@_) =
                [ NonTerminalNotDefined nt
                | nt <- _judgementsnts
                , not (nt `elem` _agnts)
                ]
            (_dupAlternative@_) =
                [ DuplicateAlternative x | x <- duplicates _alternatives ]
            (_dupRuleName@_) =
                [ DuplicateRuleName x | x <- duplicates _typerulesIrulenames ]
            (_judgementsnts@_) =
                nub (domainAL _judgementdeclsIjudgements)
            (_agnts@_) =
                nub (rangeAL _agDATAsIaltNts)
            (_alternatives@_) =
                nub (domainAL _agDATAsIaltNts)
            (_typerulesOnts@_) =
                _agnts
            (_typerulesOjudgementsMap@_) =
                listToFM (joinAL _agDATAsIaltNts _judgementdeclsIjudgements)
            (_typerulesOaltArgTypesMap@_) =
                listToFM _agDATAsIaltArgTypes
            (_judgementdeclsOtypes@_) =
                nub (concat (map (constantsInType . unqualify . unquantify) (values _allfunctions)))
            (_typerulesOfunctions@_) =
                _allfunctions
            (_allfunctions@_) =
                _lhsIfunctions `plusFM` listToFM _agDATAsIaltTypes
            (_typerulesOagdatas@_) =
                _agDATAsIself
            (_lhsOstaticErrors@_) =
                _errorsAfterWhichTyperulesAreSkipped ++
                _dupRuleName ++
                if null _errorsAfterWhichTyperulesAreSkipped then _typerulesIstaticErrors else []
            (_lhsOagcode@_) =
                AGCode _agDATAsIself
                       (implicitAttrs ++ explicitAttrs)
                       (_typerulesIagsems)
            (_self@_) =
                TypeSystem _agDATAsIself _judgementdeclsIself _typerulesIself
            (_lhsOself@_) =
                _self
            (_lhsOstaticWarnings@_) =
                _typerulesIstaticWarnings
            (_typerulesOclassEnvironment@_) =
                _lhsIclassEnvironment
        in  ( _lhsOagcode,_lhsOself,_lhsOstaticErrors,_lhsOstaticWarnings)


